// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom models for our application
model Profile {
  id            String   @id @default(uuid()) @db.Uuid
  walletAddress String   @unique @map("wallet_address") @db.VarChar(66)
  email         String?  @unique
  userId        String?  @unique @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  createdInvites SquadInvite[] @relation("CreatorInvites")
  receivedInvites SquadInvite[] @relation("InviteeInvites")

  @@map("profiles")
}

model SquadInvite {
  id            String      @id @default(uuid()) @db.Uuid
  squadName     String      @map("squad_name") @db.VarChar(255)
  creatorWallet String      @map("creator_wallet") @db.VarChar(66)
  inviteeWallet String      @map("invitee_wallet") @db.VarChar(66)
  status        InviteStatus @default(PENDING)
  expiresAt     DateTime    @map("expires_at") @db.Timestamptz(6)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  creator Profile @relation("CreatorInvites", fields: [creatorWallet], references: [walletAddress])
  invitee Profile @relation("InviteeInvites", fields: [inviteeWallet], references: [walletAddress])

  @@unique([squadName, inviteeWallet])
  @@map("squad_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
